{"files":[{"id":"6c25d7e9-974e-4bfa-93b9-517bef574d15","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Asia/Singapore\",\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\",\n  \"dependencies\": {\n    \"enabledAdvancedServices\": [\n      {\n        \"userSymbol\": \"Drive\",\n        \"serviceId\": \"drive\",\n        \"version\": \"v2\"\n      },\n      {\n        \"userSymbol\": \"Sheets\",\n        \"serviceId\": \"sheets\",\n        \"version\": \"v4\"\n      }\n    ]\n  },\n  \"webapp\": {\n    \"executeAs\": \"USER_DEPLOYING\",\n    \"access\": \"ANYONE_ANONYMOUS\"\n  }\n}"},{"id":"61f27d88-f001-433b-a76f-9a0e9a86fd9e","name":"Code","type":"server_js","source":"function doGet() {\n  return HtmlService.createHtmlOutputFromFile(\u0027Index\u0027);\n}\n\nfunction uploadFile(formData, emailAddress) {\n  try {\n    var folderName \u003d \"Receipts\";\n    var sheetId \u003d \"1mJg9uEDGsSEGklJ8FaNI2fpY-0jP1b75sDWeuDG305I\"; // Replace with your Google Sheets ID\n\n    // Decode base64 data\n    var decodedData \u003d Utilities.base64Decode(formData);\n    var blob \u003d Utilities.newBlob(decodedData, \"image/jpeg\", \"receipt.jpg\");\n\n    // Define folder\n    var folder \u003d DriveApp.getFoldersByName(folderName).next();\n    var file \u003d folder.createFile(blob);\n    var fileId \u003d file.getId();\n    var fileName \u003d blob.getName();\n\n    clearSheet(sheetId);\n\n    // Perform OCR\n    var ocrResult \u003d performOCR(fileId, fileName, sheetId);\n    \n\n    // Write items to sheet and get sheet ID\n    var sheetId2 \u003d writeItemsToSheet(ocrResult, fileName, emailAddress);\n\n    return { status: \u0027success\u0027, message: \u0027Receipt uploaded and processed successfully\u0027, sheetId: sheetId2 };\n  } catch (e) {\n    return { status: \u0027error\u0027, message: e.toString() };\n  }\n}\n\nfunction clearSheet(sheetId) {\n  var ss \u003d SpreadsheetApp.openById(sheetId);\n  var sheet \u003d ss.getSheets()[0]; // Get the first sheet\n  var range \u003d sheet.getDataRange(); // Get the entire data range\n  range.clear(); // Clear all content in the sheet\n}\n\nfunction performOCR(fileId, fileName, sheetId) {\n  var resource \u003d {\n    title: fileName,\n    mimeType: \"image/jpeg\"\n  };\n\n  // Perform OCR on the image file\n  var ocrFile \u003d Drive.Files.insert(resource, DriveApp.getFileById(fileId).getBlob(), { ocr: true });\n  var docId \u003d ocrFile.id;\n\n  // Open the Google Doc and get the OCR text\n  var doc \u003d DocumentApp.openById(docId);\n  var body \u003d doc.getBody().getText();\n\n  // Append OCR text to Google Sheet\n  var ss \u003d SpreadsheetApp.openById(sheetId);\n  var sheet \u003d ss.getActiveSheet();\n  sheet.appendRow([fileName, body]);\n\n  return body;\n}\n\nfunction parseReceipt(receiptText) {\n  if (!receiptText || typeof receiptText !\u003d\u003d \u0027string\u0027) {\n    Logger.log(\u0027Invalid receipt text\u0027);\n    return [];\n  }\n\n  const items \u003d [];\n  const lines \u003d receiptText.split(\u0027\\n\u0027);\n  let currentItem \u003d null;\n  let currentQuantity \u003d 1; // Default quantity\n  const excludeKeywords \u003d [\"change\", \"cash\", \"invoice\", \"date\", \"previous balance\", \"amount used\", \"available balance\", \"for here\", \"mobile app\", \"ref no\", \"your next drink\", \"free wifi code\", \"service tax id\", \"maybank qr\", \"powered by feedme smart\", \"this is an official receipt\", \"qty\", \"we hope to see you again soon!\", \"thank you for visiting us.\", \"enjoyed with us.\", \"sttl\",\"code\",  ]; // Keywords to exclude\n\n  for (let i \u003d 0; i \u003c lines.length; i++) {\n    const line \u003d lines[i].trim();\n\n    // Check if the line should be excluded\n    const isExcluded \u003d excludeKeywords.some(keyword \u003d\u003e line.toLowerCase().includes(keyword));\n    if (isExcluded) {\n      continue;\n    }\n\n    // Check if the line is a quantity\n    const quantityMatch \u003d line.match(/^\\d{1,2}$/);\n    if (quantityMatch) {\n      currentQuantity \u003d parseInt(quantityMatch[0], 10);\n      continue;\n    }\n\n    // Check if the line is a price\n    //const priceMatch \u003d line.match(/^(\\d+\\.\\d{2})$/);\n    const priceMatch \u003d line.match(/^(-?\\d+\\.\\d{2})$/);\n    if (priceMatch) {\n      // Check the previous line\n      if (i \u003e 0) {\n        const previousLine \u003d lines[i - 1].trim();\n        const previousLineExcluded \u003d excludeKeywords.some(keyword \u003d\u003e previousLine.toLowerCase().includes(keyword));\n        if (previousLineExcluded) {\n          continue; // Skip this price line if the previous line is excluded\n        }\n      }\n\n      const itemPrice \u003d parseFloat(priceMatch[1]);\n      if (currentItem) {\n        items.push({\n          itemName: currentItem,\n          itemQuantity: currentQuantity,\n          itemPrice: itemPrice\n        });\n        currentItem \u003d null; // Reset current item\n        currentQuantity \u003d 1; // Reset quantity to default\n      } else {\n        // Check previous lines for item name if currentItem is null\n        for (let j \u003d i - 1; j \u003e\u003d 0; j--) {\n          let previousLine \u003d lines[j].trim();\n          const previousLineExcluded \u003d excludeKeywords.some(keyword \u003d\u003e previousLine.toLowerCase().includes(keyword));\n          if (previousLineExcluded) {\n            continue; // Skip excluded words\n          }\n          currentItem \u003d previousLine;\n          break;\n        }\n        if (currentItem) {\n          items.push({\n            itemName: currentItem,\n            itemQuantity: currentQuantity,\n            itemPrice: itemPrice\n          });\n          currentItem \u003d null;\n          currentQuantity \u003d 1;\n        }\n      }\n      continue;\n    }\n\n    // If it\u0027s not a quantity or a price, it must be an item name\n    if (!quantityMatch \u0026\u0026 !priceMatch) {\n      currentItem \u003d line;\n    }\n  }\n\n  return items;\n}\n\nfunction writeItemsToSheet(ocrResult, fileName, emailAddress) {\n  const receiptText \u003d ocrResult;\n\n  const items \u003d parseReceipt(receiptText);\n\n  // Open the Google Sheet by ID and select the first sheet\n  var sheetId2 \u003d \"1Ugkx_GYOddIGbybRxupCww8UUEURC8zI9pz2G0x1DkI\";\n  const sheet \u003d SpreadsheetApp.openById(sheetId2).getSheets()[0];\n\n  clearSheet(sheetId2);\n\n  // Write headers\n  sheet.getRange(\u0027A1\u0027).setValue(\u0027Item\u0027);\n  sheet.getRange(\u0027B1\u0027).setValue(\u0027Quantity\u0027);\n  sheet.getRange(\u0027C1\u0027).setValue(\u0027Price\u0027);\n\n  // Write items to the sheet\n  items.forEach((item, index) \u003d\u003e {\n    sheet.getRange(index + 2, 1).setValue(item.itemName);\n    sheet.getRange(index + 2, 2).setValue(item.itemQuantity);\n    sheet.getRange(index + 2, 3).setValue(item.itemPrice);\n  });\n\n  // Send email with OCR result\n  sendEmail(emailAddress, fileName, sheetId2);\n\n  return sheetId2;\n}\n\nfunction sendEmail(emailAddress, fileName, sheetId2) {\n  var subject \u003d \"Your receipt for \" + fileName;\n\n  // Open the Google Sheet by ID and select the first sheet\n  const sheet \u003d SpreadsheetApp.openById(sheetId2).getSheets()[0];\n\n  // Get the parsed items from the sheet\n  var range \u003d sheet.getRange(\u0027A2:C\u0027 + sheet.getLastRow());\n  var values \u003d range.getValues();\n\n  // Prepare email body with parsed items\n  var body \u003d \"Here are the items from your receipt:\\n\\n\";\n\n  values.forEach(function (row) {\n    try {\n      var itemName \u003d row[0];\n      var itemQuantity \u003d row[1];\n      var itemPrice \u003d row[2];\n\n      // Skip items that are not strings\n      if (typeof itemName !\u003d\u003d \u0027string\u0027) {\n        return; // Skip this item\n      }\n\n      itemName \u003d itemName.padEnd(30, \u0027 \u0027);  // Adjust padding as needed\n      itemQuantity \u003d itemQuantity.toString().padEnd(8, \u0027 \u0027);\n      itemPrice \u003d itemPrice.toFixed(2).padEnd(8, \u0027 \u0027);\n\n      body +\u003d `${itemName}\\t${itemQuantity}\\t${itemPrice}\\n`;\n    } catch (e) {\n      Logger.log(\u0027Error processing row: \u0027 + row + \u0027, Error: \u0027 + e);\n      // Skip the row if an error occurs\n    }\n  });\n\n  // Send email\n  MailApp.sendEmail(emailAddress, subject, body);\n}\n\n// Function to get receipt data for display on web page\nfunction getReceiptData() {\n  var sheetId \u003d \"1Ugkx_GYOddIGbybRxupCww8UUEURC8zI9pz2G0x1DkI\"; // Replace with your Google Sheets ID\n  var sheet \u003d SpreadsheetApp.openById(sheetId).getSheets()[0];\n  var range \u003d sheet.getRange(\u0027A2:C\u0027 + sheet.getLastRow());\n  var values \u003d range.getValues();\n  return values;\n}\n"},{"id":"ab41684d-809f-47d4-999e-ce7505b55156","name":"Index","type":"html","source":"\u003c!DOCTYPE html\u003e\n\u003chtml\u003e\n\u003chead\u003e\n  \u003cbase target\u003d\"_top\"\u003e\n  \u003c!-- Include Font Awesome --\u003e\n  \u003clink rel\u003d\"stylesheet\" href\u003d\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\"\u003e\n  \u003cstyle\u003e\n    body {\n      font-family: \u0027Arial\u0027, sans-serif;\n      background-color: #f8f0fc;\n      margin: 0;\n      padding: 0;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n      height: 100vh;\n      color: #333;\n    }\n    .container {\n      background-color: #fff;\n      padding: 20px;\n      border-radius: 8px;\n      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n      text-align: center;\n      width: 400px;\n      position: relative;\n    }\n    .logo-container {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n    .logo-container img {\n      width: 250px; /* Adjust as needed */\n      height: auto;\n      margin-bottom: 30px;\n    }\n    h2 {\n      color: #6f42c1;\n    }\n    h4 {\n      color: #FF0000;\n      padding: 20px;\n      align-items: center;\n    }\n    .file-input-container {\n      position: relative;\n      width: 100%; /* Adjust to fit container */\n      margin: 0 auto 40px;\n    }\n    .file-input-container input[type\u003d\"file\"] {\n      display: none;\n    }\n    .file-input-label {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      padding: 10px;\n      border-radius: 5px;\n      border: 1px solid #ccc;\n      background-color: #d63384;\n      color: #fff5ee;\n      cursor: pointer;\n      width: 100%; /* Adjust width to fit container */\n      max-width: 100%; /* Ensure it doesn\u0027t exceed container */\n      overflow-wrap: break-word; /* Allow text to wrap */\n      text-align: center; /* Center align text */\n      box-sizing: border-box; /* Include padding and border in width */\n    }\n    .file-input-label i {\n      text-align: center;\n      font-size: 22px;\n    }\n    .file-name {\n      margin-top: 5px;\n      font-size: 16px; /* Match font size */\n      text-align: center;\n      color: #333;\n    }\n    input[type\u003d\"email\"] {\n      width: calc(100% - 20px);\n      padding: 10px;\n      margin: 10px 0;\n      border-radius: 5px;\n      border: 1px solid #ccc;\n      font-size: 16px; /* Match font size */\n    }\n    button {\n      background-color: #d63384;\n      color: white;\n      border: none;\n      cursor: pointer;\n      font-size: 16px; /* Match font size */\n      width: 120px; /* Adjust size for circular button */\n      height: 120px; /* Adjust size for circular button */\n      border-radius: 50%; /* Make the button circular */\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      position: relative;\n      margin: 0 auto; /* Center the button */\n      overflow: hidden;\n      transition: background-color 0.3s;\n    }\n\n    button i {\n      font-size: 26px;\n      transition: opacity 0.3s;\n    }\n\n    button .btn-text {\n      visibility: hidden;\n      opacity: 0;\n      transition: opacity 0.3s;\n      position: absolute;\n      left: 50%;\n      transform: translateX(-50%);\n      white-space: nowrap; /* Prevents text from wrapping */\n    }\n    button:hover .btn-text {\n      visibility: visible;\n      opacity: 1;\n      font-size: 25px;\n    }\n    button:hover i {\n      visibility: hidden;\n      opacity: 0;\n    }\n    button.loading i {\n      visibility: hidden;\n      opacity: 0;\n    }\n\n    button.loading .btn-text {\n      visibility: hidden;\n      opacity: 1;\n      font-size: 20px;\n    }\n\n    button.loading .spinner {\n      display: block;\n    }\n\n    .spinner {\n      border: 4px solid rgba(0,0,0,0.1); /* Light grey */\n      border-left: 4px solid #fff; /* White */\n      border-radius: 50%;\n      width: 30px;\n      height: 30px;\n      animation: spin 1s linear infinite;\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      margin: auto;\n      display: none; /* Hidden by default */\n    }\n\n    @keyframes spin {\n      0% { transform: rotate(0deg); }\n      100% { transform: rotate(360deg); }\n    }\n    pre {\n      text-align: left;\n      background-color: #f0f0f0;\n      padding: 10px;\n      border-radius: 5px;\n      border: 1px solid #ddd;\n      white-space: pre-wrap; /* Wraps long lines */\n      word-wrap: break-word; /* Breaks words to fit within container */\n      display: none; /* Initially hidden */\n    }\n    h3 {\n      display: none; /* Initially hidden */\n      color: #6f42c1; /* Match header color with h2 */\n    }\n    .decorations {\n      position: absolute;\n      top: -20px;\n      right: -20px;\n      width: 100px;\n      height: 100px;\n      background: radial-gradient(circle at top left, #f8d7da, #f5c6cb);\n      border-radius: 50%;\n      z-index: -1;\n    }\n    .decorations::before {\n      content: \u0027\u0027;\n      position: absolute;\n      top: 80px;\n      left: -40px;\n      width: 60px;\n      height: 60px;\n      background: radial-gradient(circle at bottom right, #e2d5f3, #d1c4e9);\n      border-radius: 50%;\n      z-index: -1;\n    }\n  \u003c/style\u003e\n  \u003cscript\u003e\n    function uploadFile() {\n      \n      var fileInput \u003d document.getElementById(\u0027file\u0027);\n      var emailInput \u003d document.getElementById(\u0027email\u0027).value;\n      var file \u003d fileInput.files[0];\n      var errorMessage \u003d document.getElementById(\u0027errorMessage\u0027);\n\n       // Hide the error message initially\n      errorMessage.style.display \u003d \u0027none\u0027;\n\n      if (!file || !emailInput) {\n        // Show error message if file or email is missing\n        errorMessage.style.display \u003d \u0027block\u0027;\n        errorMessage.textContent \u003d \u0027Please fill in both the file and email fields.\u0027;\n        return; // Exit the function if validation fails\n      }\n  \n      var reader \u003d new FileReader();\n      reader.onload \u003d function(e) {\n        var base64Data \u003d e.target.result.split(\u0027,\u0027)[1];\n        google.script.run.withSuccessHandler(onSuccess)\n                       .withFailureHandler(onFailure)\n                       .uploadFile(base64Data, emailInput);\n      };\n      reader.readAsDataURL(file);\n      \n      var button \u003d document.querySelector(\u0027button\u0027);\n      button.classList.add(\u0027loading\u0027); // Add loading class\n    }\n\n    function onSuccess(result) {\n      var button \u003d document.querySelector(\u0027button\u0027);\n      button.classList.remove(\u0027loading\u0027); // Remove loading class\n      if (result.status \u003d\u003d\u003d \u0027success\u0027) {\n        document.getElementById(\u0027ocrResult\u0027).innerText \u003d result.message; // Display success message\n        document.querySelector(\u0027h3\u0027).style.display \u003d \u0027block\u0027; // Make h3 visible\n        document.getElementById(\u0027ocrResult\u0027).style.display \u003d \u0027block\u0027; // Make pre visible\n\n        // Fetch the receipt data and display in the \u003cpre\u003e element\n        google.script.run.withSuccessHandler(displayReceipt).getReceiptData();\n      } else {\n        document.getElementById(\u0027ocrResult\u0027).innerText \u003d \u0027Error: \u0027 + result.message;\n      }\n    }\n\n    function onFailure(error) {\n      var button \u003d document.querySelector(\u0027button\u0027);\n      button.classList.remove(\u0027loading\u0027); // Remove loading class\n      document.getElementById(\u0027ocrResult\u0027).     innerText \u003d \u0027Error: \u0027 + error.message;\n    }\n\n    function wrapText(text, maxLength) {\n      var result \u003d \u0027\u0027;\n      var lines \u003d text.split(\u0027\\n\u0027);\n\n      lines.forEach(function(line) {\n        while (line.length \u003e maxLength) {\n          result +\u003d line.substring(0, maxLength) + \u0027\\n\u0027;\n          line \u003d line.substring(maxLength);\n        }\n        result +\u003d line + \u0027\\n\u0027;\n      });\n\n      return result;\n    }\n\n    function displayReceipt(receiptData) {\n      var body \u003d \"Here are the items from your receipt:\\n\\n\";\n\n      receiptData.forEach(function(row) {\n        try {\n          var itemName \u003d row[0];\n          var itemQuantity \u003d row[1];\n          var itemPrice \u003d row[2];\n\n          // Skip items that are not strings\n          if (typeof itemName !\u003d\u003d \u0027string\u0027) {\n            return; // Skip this item\n          }\n\n          itemName \u003d itemName.padEnd(27, \u0027 \u0027);  // Adjust padding as needed\n          itemQuantity \u003d itemQuantity.toString().padEnd(7, \u0027 \u0027);\n          itemPrice \u003d itemPrice.toFixed(2).padEnd(7, \u0027 \u0027);\n\n          body +\u003d `${itemName}\\t${itemQuantity}\\t${itemPrice}\\n`;\n        } catch (e) {\n          console.error(\u0027Error processing row: \u0027 + row + \u0027, Error: \u0027 + e);\n          // Skip the row if an error occurs\n        }\n      });\n\n      // Wrap text before displaying it\n      var wrappedText \u003d wrapText(body, 50); // Adjust maxLength as needed\n\n      document.getElementById(\u0027ocrResult\u0027).innerText \u003d wrappedText;\n    }\n\n    function updateFileName() {\n      var fileInput \u003d document.getElementById(\u0027file\u0027);\n      var fileNameDisplay \u003d document.getElementById(\u0027fileName\u0027);\n      fileNameDisplay.textContent \u003d fileInput.files.length \u003e 0 ? fileInput.files[0].name : \u0027No file chosen\u0027;\n    }\n  \u003c/script\u003e\n\u003c/head\u003e\n\u003cbody\u003e\n  \u003cdiv class\u003d\"container\"\u003e\n    \u003cdiv class\u003d\"decorations\"\u003e\u003c/div\u003e\n    \u003cdiv class\u003d\"logo-container\"\u003e\n      \u003cimg src\u003d\"https://drive.google.com/thumbnail?export\u003dview\u0026id\u003d1sAJ5-V_lGJLmpiLrtY0aAT5F3JcOmMgU\" border\u003d\"0\" alt\u003d\"Logo\" title\u003d\"Logo\"\u003e \n    \u003c/div\u003e\n    \u003cdiv class\u003d\"file-input-container\"\u003e\n      \u003clabel for\u003d\"file\" class\u003d\"file-input-label\"\u003e\n        \u003ci class\u003d\"fas fa-file-upload\"\u003e\u003c/i\u003e\n        \u003cspan id\u003d\"fileName\" class\u003d\"file-name\"\u003eNo file chosen\u003c/span\u003e\n      \u003c/label\u003e\n      \u003cinput type\u003d\"file\" id\u003d\"file\" onchange\u003d\"updateFileName()\"\u003e\n    \u003c/div\u003e\n    \u003ch2\u003eEnter your email address\u003c/h2\u003e\n    \u003cinput type\u003d\"email\" id\u003d\"email\" placeholder\u003d\"Enter your email address\"\u003e\u003cbr\u003e\u003cbr\u003e\n    \u003cbutton onclick\u003d\"uploadFile()\"\u003e\n      \u003ci class\u003d\"fas fa-upload\"\u003e\u003c/i\u003e\n      \u003cspan class\u003d\"btn-text\"\u003eUpload\u003c/span\u003e\n      \u003cdiv class\u003d\"spinner\"\u003e\u003c/div\u003e \u003c!-- Spinner for loading --\u003e\n    \u003c/button\u003e\n    \u003ch3\u003eDigitalised Receipt:\u003c/h3\u003e\n    \u003cpre id\u003d\"ocrResult\"\u003e\u003c/pre\u003e\n    \u003ch4\u003e\u003cdiv id\u003d\"errorMessage\" class\u003d\"error-message\"\u003e\u003c/div\u003e\u003c/h4\u003e \u003c!-- Error message --\u003e\n  \u003c/div\u003e\n\u003c/body\u003e\n\u003c/html\u003e\n"}]}